AND GATE 
logical_and_dataset = pd.read_csv("https://raw.githubusercontent.com/infiniaclub/NeuralNetworkDataset/main/logical_and.csv").values 
learning_rate = 0.01  ## 1% Learning Rate 
n_epoch = 7    ## Change n_epoch or learning_rate to see effect on prediction 
logical_and_dataset 
 
OUTPUT------------- 
array([[1, 1, 1], 
       [1, 0, 0], 
       [0, 1, 0], 
       [0, 0, 0]]) 
 
 
def training_weights(train_data,learning_rate,n_epoch): 
  weights=[0 for i in range(len(train_data[0]))] 
  for epoch in range(n_epoch): 
    sum_err=0 
    for row in train_data: 
      prediction=predict(row,weights) 
      err=row[-1]-prediction 
      sum_err +=err**2 
      weights[0] += learning_rate*err 
      for i in range(len(row)-1): 
        weights[i+1] += learning_rate*err*row[i] 
    print(f">epoch ={epoch}, learning_rate={learning_rate},MSE={sum_err}") 
  return weights 
  
weights = training_weights(logical_and_dataset, learning_rate, n_epoch) 
print(f"\n Computed Bias : {round(weights[0],3)} \n Computed Weights_i: {weights[1:]} \n") 
OUTPUT--------------------- 
>epoch =0, learning_rate=0.01,MSE=1 
>epoch =1, learning_rate=0.01,MSE=3 
>epoch =2, learning_rate=0.01,MSE=2 
>epoch =3, learning_rate=0.01,MSE=2 
>epoch =4, learning_rate=0.01,MSE=3 
>epoch =5, learning_rate=0.01,MSE=2 
>epoch =6, learning_rate=0.01,MSE=2 
  
Computed Bias : -0.03  
Computed Weights_i: [0.01, 0.02]  
  
 
for row in logical_and_dataset: 
prediction = predict(row, weights) 
print(f"Actual: {round(row[-1])}  Predicted: {round(prediction)}") 
 
for row in logical_and_dataset: 
prediction = predict(row, weights) 
print(f"Actual: {round(row[-1])}  Predicted: {round(prediction)}") 
