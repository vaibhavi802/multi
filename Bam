import numpy as np
import random
import math


X1 = [1, 1, 1, 1, 1, 1]
X2 = [-1, -1, -1, -1, -1, -1]
X3 = [1, -1, -1, 1, 1, 1]
X4 = [1, 1, -1, -1, -1, -1]
X = np.array([X1, X2, X3, X4])

Y1 = [1, 1, 1]
Y2 = [-1, -1, -1]
Y3 = [-1, 1, 1]
Y4 = [1, -1, 1]
Y = np.array([Y1, Y2, Y3, Y4])

print("X = ", X)
print("\nY = ", Y)
print("\nDimensions of X: ", X.shape)
print("\nDimensions of Y: ", Y.shape)


weight = np.dot(X.T, Y)
print('Weights = \n', weight, end = "")

print(f"\nDimensions of Weight Matrix: {weight.shape}")


def BipolarActivation(matrix, weight):
    matrix[matrix > 0] = 1
    matrix[matrix <= 0] = -1
    return np.array(matrix)


def backward(Y, weight):
  x = np.dot(Y, weight.T)
  return BipolarActivation(x, weight)

print(f"weight * Y1 =  {backward(Y1, weight)} & X1 = {X1} {np.array_equiv(backward(Y1, weight),X1)}")
print(f"weight * Y2 = {backward(Y2, weight)} & X2 = {X2} {np.array_equiv(backward(Y2, weight),X2)}")
print(f"weight * Y3 = {backward(Y3, weight)} & X3 = {X3} {np.array_equiv(backward(Y3, weight),X3)}")
print(f"weight * Y4 = {backward(Y4, weight)} & X4 = {X4} {np.array_equiv(backward(Y4, weight),X4)}")


def forward(X, weight):
  Y = np.dot(weight.T, X)
  return BipolarActivation(Y, weight)

print(f"weight * X1 =  {forward(X1, weight)} & Y1 = {Y1} {np.array_equiv(forward(X1, weight),Y1)}")
print(f"weight * X2 =  {forward(X2, weight)} & Y2 = {Y2} {np.array_equiv(forward(X2, weight),Y2)}")
print(f"weight * X3 =  {forward(X3, weight)} & Y3 = {Y3} {np.array_equiv(forward(X3, weight),Y3)}")
print(f"weight * X4 =  {forward(X4, weight)} & Y4 = {Y4} {np.array_equiv(forward(X4, weight),Y4)}")


X1 = [1, 1, 1, 1, 1, 1]
X2 = [-1, -1, -1, -1, -1, -1]
X3 = [1, -1, -1, 1, 1, 1]
X4 = [1, 1, -1, -1, -1, -1]
X = np.array([X1, X2, X3, X4])

Y1 = [1, 1, 1]
Y2 = [-1, -1, -1]
Y3 = [-1, 1, 1]
Y4 = [1, -1, 1]
Y = np.array([Y1, Y2, Y3, Y4])

a = np.dot(X.T,Y)
print(a)
