TRAINING NETWORK WEIGHTS  
 
def predict(row,weights): 
  activation=weights[0] 
  for i in range(len(row)-1): 
    activation +=weights[i+1]*row[i] 
  return 1 if activation >=0 else 0 
  
def training_data(train_data,learning_rate,n_epoch): 
  weights=[0 for i in range(len(train_data[0]))] 
  for epoch in range(n_epoch): 
    sum_err=0 
    for row in train_data: 
      prediction=predict(row,weights) 
      err=row[-1]-prediction 
      sum_err+=err**2 
      weights[0] = weights[0] + learning_rate*err 
      for i in range(len(row)-1): 
        weights[i+1] =weights[i+1]+learning_rate*err*row[i] 
    print(f">epoch:{epoch},Learning_rate :{learning_rate},MSE:{sum_err}") 
  return weights 
  
learning_rate=0.1 
n_epoch=5 
weights=training_data(df,learning_rate,n_epoch) 
print(f"Computed Bias {round(weights[0],3)} , Computed Weights{weights[1:]}") 
 
correct_predictions = 0 
for row in df: 
  prediction=predict(row,weights) 
  if prediction == row[-1]: 
        correct_predictions += 1 
  print(f"Actual {round(row[-1])} Predicted :{prediction}") 
accuracy = (correct_predictions / len(df))*100 
print(f"Accuracy is : {accuracy}%")  
 
 
Actual 0 Predicted :0 
Actual 0 Predicted :0 
Actual 0 Predicted :0 
Actual 0 Predicted :0 
Actual 0 Predicted :0 
Actual 1 Predicted :1 
Actual 1 Predicted :1 
Actual 1 Predicted :1 
Actual 1 Predicted :1 
Actual 1 Predicted :1 
Accuracy is : 100.0% 
 
